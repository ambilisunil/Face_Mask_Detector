# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'img1.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets

from PyQt5.QtWidgets import QApplication, QWidget, QInputDialog, QLineEdit, QFileDialog
from PyQt5.QtGui import QIcon
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication,QWidget, QVBoxLayout, QPushButton, QFileDialog , QLabel, QTextEdit
import sys
import cv2

from PyQt5.QtGui import QPixmap
import face_recognition
import pickle
import numpy as np
import docopt 
from sklearn import svm 
import os
import joblib
from joblib import dump, load
import subprocess as sp


def imgrec(tst):
    clf = load('Model.joblib') 
    test=tst

    test_image = face_recognition.load_image_file(test) 

    # Find all the faces in the test image using the default HOG-based model 
    face_locations = face_recognition.face_locations(test_image) 
    no = len(face_locations) 
    print("Number of faces detected: ", no) 

	# Predict all the faces in the test image using the trained classifier 
    print("Found:")
    f = open("UnmaskedList.txt", "w")
    f.write("Un Masked Persons are: ")
    f.close()
    f = open("UnmaskedList.txt", "a")


    for i in range(no): 
    	test_image_enc = face_recognition.face_encodings(test_image)[i]
    	name = clf.predict([test_image_enc])
    	print(*name)
    	f.write(*name)
    	f.write(",  ")
    f.close()

    programName = "notepad.exe"
    fileName = "UnmaskedList.txt"
    sp.Popen([programName, fileName])

        



class Ui_MainWindow2(object):


        
    def setupUi(self, MainWindow2):
        MainWindow2.setObjectName("MainWindow2")
        MainWindow2.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow2)
        self.centralwidget.setObjectName("centralwidget")
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(190, 80, 381, 131))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.layoutWidget)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.lineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.lineEdit.setObjectName("lineEdit")
        self.horizontalLayout.addWidget(self.lineEdit)
        self.pushButton = QtWidgets.QPushButton(self.layoutWidget)
        self.pushButton.setObjectName("pushButton")
        
        

        


        
        self.horizontalLayout.addWidget(self.pushButton)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(350, 250, 75, 41))
        
        
        self.pushButton_2.setObjectName("pushButton_2")
        MainWindow2.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow2)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        MainWindow2.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow2)
        self.statusbar.setObjectName("statusbar")
        MainWindow2.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow2)
        QtCore.QMetaObject.connectSlotsByName(MainWindow2)

    def retranslateUi(self, MainWindow2):
        _translate = QtCore.QCoreApplication.translate
        MainWindow2.setWindowTitle(_translate("MainWindow2", "Mask Detector of Images"))
        self.label.setText(_translate("MainWindow2", "<html><head/><body><p align=\"center\"><span style=\" font-size:14pt; font-weight:600; color:#0055ff;\">Select Image</span></p></body></html>"))
        self.pushButton.setText(_translate("MainWindow2", "Browse"))
        self.pushButton_2.setText(_translate("MainWindow2", "OK"))
        self.pushButton.clicked.connect(self.pushButton_handler)
        self.pushButton_2.clicked.connect(self.on_click)
    def pushButton_handler(self):
        print("button pressed")
        self.open_dialog_box()
    def open_dialog_box(self):
            filename = QFileDialog.getOpenFileName()
            path = filename[0]
            print(path)
            self.lineEdit.setText(path)
    def on_click(self):
        print("clicked")
        self.opn()
    def opn(self):
        face_mask = cv2.CascadeClassifier('mask.xml')
        path=self.lineEdit.text()
        img11 = cv2.imread(path)
        img = cv2.resize(img11,(240,300))

        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        face = face_mask.detectMultiScale(gray,1.1,4)

   
        for(x,y,w,h) in face:
            cv2.rectangle(img,(x,y),(x+w,y+h),(255,0,0),2)
            roi_gray = gray[y:y+h, x:x+w]
            roi_color = img[y:y+h, x:x+w]
            font = cv2.FONT_HERSHEY_SIMPLEX
            cv2.putText(img,'Using Mask', (55,280), font,1,(0,255,0),2)
        if len(face)==0:
            cv2.putText(img,'Without Mask',(20,200), cv2.FONT_HERSHEY_SIMPLEX,1,(0, 0, 255),2)
            imgrec(path)
            

        font = cv2.FONT_HERSHEY_SIMPLEX
        
        cv2.imshow('test',img)
        cv2.waitKey(0)    
        cv2.destroyAllWindows()

            


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow2 = QtWidgets.QMainWindow()
    ui = Ui_MainWindow2()
    ui.setupUi(MainWindow2)
    MainWindow2.show()
    sys.exit(app.exec_())
